* tsukimi project

* What's this?

	This will be a couple of attempt to achieve support for processing[*1]
	under moonlight[*2].

	So far there are three assemblies as outcome from this project:

	- Processing.Core.dll : this aims to support processing standard
	  library, to make application runnable under Moonlight.
	- Processing.Importer.dll : this is to import processing application
	  and generate Moonlight application (xap package etc.).
	  The resulting application should run under Silverlight too, but
	  it is not tested at all.
	- tsukimi-tool.exe : console frontend to the importer.

	It is still in early stage and everything is subject to change.

	[*1] http://processing.org/
	[*2] http://mono-project.com/Moonlight

** Dependencies

	You need moon (from trunk) built and installed.
	Note that I don't mean novell-moonlight.xpi (firefox plugin).
	This application depends on its command line tool "mxap".

	Also it depends on "zip" command when it imports application data.

** Usage

	First, build the assemblies above by running "make".

	Then, go to processing application directory (I recommend to
	create a copy of the original application, as this will generate
	extra files on the directory) and run:

		mono tsukimi-tool.exe --xap .

	Then it will generate xap package, stub html and so on (it is
	actually what mxap does). You'll only need *.xap.

** Basic design

	- Processing parser that parses processing files (*.pde) to the AST.
	- "processing standard library" for common functions and classes.
	  It is based on System.Windows.dll
	- Code generator that is based on the standard library.
	  Not sure we generate either of some source code or direct IL.
	  So far we generate C# sources directly. (We could generate python
	  or ruby sources and make it work with dynamic silverlight, but
	  it adds somewhat heavy dependency. We avoid it so far.)

*** TODOs

	- support draw(). There is no animation yet.
	  Not sure if we can support it though.
	- A lot of library features are missing.

** Source Files

	- processing_syntax.txt:
	  my analysis on processing syntax. It is based on 1.0 beta.

	- skeleton.cs :
	  taken from mcs (jay).

** Parser/Converter

*** Some Details

	- *.pde files are parsed to build AstRoot.
	- "ProcessingApplication" class is generated to hold global members.
	- For each top level contents in AstRoot:
	-- A class is converted to generate a managed class.
	-- A global function definition is converted to a method of Global class.
	-- A statement is converted to become a statement in the global Run().


